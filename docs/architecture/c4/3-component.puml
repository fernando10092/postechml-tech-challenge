@startuml C4_Component
!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

' CONTÊINER ÚNICO DO SERVIÇO
Container(mainService, "Serviço de Vitivinicultura", "Python", "Coleta, processa e expõe dados da vitivinicultura via REST")

' COMPONENTES DA API
Component(controller, "DataController", "FastAPI Controller", "Expõe os endpoints REST")
Component(service, "ViticultureDataService", "Python Service", "Lógica de negócio e transformação de dados")
Component(repository, "ViticultureRepository", "Repository", "Interage com o banco de dados")
Component(scraperAdapter, "ScraperStatusAdapter", "Adapter", "Consulta dados do scraper ou agenda raspagens (opcional)")

' COMPONENTES DO SCRAPER
Component(spider, "VitivinicultureSpider", "Scrapy Spider", "Define URLs, callbacks e lógica de raspagem")
Component(parser, "HTML Parser", "Parser", "Extrai e normaliza os dados das páginas HTML")
Component(pipeline, "Scrapy Pipeline", "Pipeline", "Recebe os itens processados e envia para persistência")
Component(dbAdapter, "Database Adapter", "Adapter", "Salva os dados no banco de forma estruturada")

' SISTEMA EXTERNO
System_Ext(embrapa, "Portal da Embrapa", "Site público de dados")

' RELACIONAMENTOS API
Rel(user, controller, "Faz requisições HTTP")
Rel(controller, service, "Chama")
Rel(service, repository, "Lê dados de / envia dados para")
Rel(service, scraperAdapter, "Consulta estado / aciona scraping", "opcional")

' RELACIONAMENTOS DO SCRAPER
Rel(scraperAdapter, spider, "Agenda execução de") ' Integrando o adapter da API com o scraper
Rel(spider, parser, "Envia HTML para")
Rel(parser, pipeline, "Envia itens extraídos")
Rel(pipeline, dbAdapter, "Grava dados em")
Rel(spider, embrapa, "Faz scraping de")

SHOW_LEGEND()
@enduml